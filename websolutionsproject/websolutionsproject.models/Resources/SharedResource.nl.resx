<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ActorId is required" xml:space="preserve">
    <value>ActorId is verplicht</value>
  </data>
  <data name="Actors starring in this movie" xml:space="preserve">
    <value>Acteurs die meespelen</value>
  </data>
  <data name="Average rating" xml:space="preserve">
    <value>Gemiddelde beoordeling</value>
  </data>
  <data name="Confirm new password" xml:space="preserve">
    <value>Bevestig nieuw wachtwoord</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Datum</value>
  </data>
  <data name="Date is required" xml:space="preserve">
    <value>Datum is verplicht</value>
  </data>
  <data name="Date of Birth" xml:space="preserve">
    <value>Geboortedatum</value>
  </data>
  <data name="Date of Birth is required" xml:space="preserve">
    <value>Geboortedatum is verplicht</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Beschrijving</value>
  </data>
  <data name="Description is required" xml:space="preserve">
    <value>Beschrijving is verplicht</value>
  </data>
  <data name="Director" xml:space="preserve">
    <value>Regisseur</value>
  </data>
  <data name="Director is required" xml:space="preserve">
    <value>Regisseur is verplicht</value>
  </data>
  <data name="Duration in minutes" xml:space="preserve">
    <value>Duur in minuten</value>
  </data>
  <data name="Email address" xml:space="preserve">
    <value>Email adres</value>
  </data>
  <data name="Email is not valid" xml:space="preserve">
    <value>Geen geldig email adres</value>
  </data>
  <data name="Email is required" xml:space="preserve">
    <value>Email is verplicht</value>
  </data>
  <data name="First Name" xml:space="preserve">
    <value>Voornaam</value>
  </data>
  <data name="First name is required" xml:space="preserve">
    <value>Voornaam is verplicht</value>
  </data>
  <data name="Genre" xml:space="preserve">
    <value>Genre</value>
  </data>
  <data name="Genre is required" xml:space="preserve">
    <value>Genre is verplicht</value>
  </data>
  <data name="Last Name" xml:space="preserve">
    <value>Achternaam</value>
  </data>
  <data name="Last name is required" xml:space="preserve">
    <value>Achternaam is verplicht</value>
  </data>
  <data name="Minimum 6 characters with at least one capital letter, small letter, number and special sign" xml:space="preserve">
    <value>Minimum 6 karakters met minstens één hoofdletter, kleine letter, cijfer en speciaal teken</value>
  </data>
  <data name="Movie" xml:space="preserve">
    <value>Film</value>
  </data>
  <data name="Movie is required" xml:space="preserve">
    <value>Film is verplicht</value>
  </data>
  <data name="MovieId is required" xml:space="preserve">
    <value>MovieId is verplicht</value>
  </data>
  <data name="Movies where this actor plays in" xml:space="preserve">
    <value>Films waarin deze acteur in meespeelt</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Naam</value>
  </data>
  <data name="Name is required" xml:space="preserve">
    <value>Naam is verplicht</value>
  </data>
  <data name="Nationality" xml:space="preserve">
    <value>Nationaliteit</value>
  </data>
  <data name="Nationality is required" xml:space="preserve">
    <value>Nationaliteit is verplicht</value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Wachtwoord</value>
  </data>
  <data name="Password is required" xml:space="preserve">
    <value>Wachtwoord is verplicht</value>
  </data>
  <data name="Passwords do not match" xml:space="preserve">
    <value>Wachtwoorden komen niet overeen</value>
  </data>
  <data name="Rating" xml:space="preserve">
    <value>Score</value>
  </data>
  <data name="Rating is required" xml:space="preserve">
    <value>Score is verplicht</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Gebruikersnaam</value>
  </data>
  <data name="Username is required" xml:space="preserve">
    <value>Gebruikersnaam is verplicht</value>
  </data>
  <data name="Value must be between 0 and 10." xml:space="preserve">
    <value>Waarde moet tussen 0 en 10 zijn</value>
  </data>
  <data name="Value must be between 0 and 3000." xml:space="preserve">
    <value>Waarde moet tussen 0 en 3000 zijn</value>
  </data>
  <data name="Year" xml:space="preserve">
    <value>Jaar</value>
  </data>
</root>